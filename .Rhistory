amplicon = "16S"
path = "~/Repository/LRF/00_erifa_bak/ranomaly_test/reads"
out = "./dada2_out/"
f_trunclen = 240
r_trunclen = 240
f_primer = "GCATCGATGAAGAACGCAGC"
r_primer = "TCCTCCGCTTWTTGWTWTGC"
plot = TRUE
compress = TRUE
verbose = 1
if(verbose == 3){
invisible(flog.threshold(DEBUG))
} else {
invisible(flog.threshold(INFO))
}
flog.info('Done.')
wd <- getwd()
flog.info("Creating directory.")
if(!dir.exists(out)){
dir.create(out)
}
flog.info('Done.')
if(compress==TRUE){
flog.info('Loading compress files...')
fnFs <- sort(list.files(path, pattern = "_R1.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern = "_R2.fastq.gz", full.names = TRUE))
}else{
flog.info('Loading flat files...')
fnFs <- sort(list.files(path, pattern = "_R1.fastq$", full.names = TRUE))
fnRs <- sort(list.files(path, pattern = "_R2.fastq$", full.names = TRUE))
}
flog.debug("File list...")
flog.debug(fnFs)
flog.debug(fnRs)
flog.info('Done.')
library(futile.logger)
suppressMessages(library("optparse"))
suppressMessages(library(dada2))
suppressMessages(library(psadd))
suppressMessages(library(ShortRead))
suppressMessages(library(Biostrings))
suppressMessages(library(ggplot2))
if(verbose == 3){
invisible(flog.threshold(DEBUG))
} else {
invisible(flog.threshold(INFO))
}
flog.info('Done.')
wd <- getwd()
flog.info("Creating directory.")
if(!dir.exists(out)){
dir.create(out)
}
flog.info('Done.')
if(compress==TRUE){
flog.info('Loading compress files...')
fnFs <- sort(list.files(path, pattern = "_R1.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern = "_R2.fastq.gz", full.names = TRUE))
}else{
flog.info('Loading flat files...')
fnFs <- sort(list.files(path, pattern = "_R1.fastq$", full.names = TRUE))
fnRs <- sort(list.files(path, pattern = "_R2.fastq$", full.names = TRUE))
}
flog.debug("File list...")
flog.debug(fnFs)
flog.debug(fnRs)
flog.info('Done.')
flog.info('DADA2 16S')
# save.image("debug.rdata")
if(plot){
flog.info('Plotting 1 ...')
pf <- plotQualityProfile(fnFs[1:2])
pr <- plotQualityProfile(fnRs[1:2])
ggsave(paste(out,'/qual_plot_f.png',sep=''), plot=pf)
ggsave(paste(out,'/qual_plot_r.png',sep=''), plot=pr)
flog.info('Done.')
}
flog.debug(length(fnFs))
flog.debug(length(fnRs))
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
if(compress){
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
}else{
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq"))
}
names(filtFs) <- sample.names
names(filtRs) <- sample.names
print(head(fnFs))
print(head(fnRs))
print(head(filtFs))
print(head(filtRs))
print(head(f_trunclen))
print(head(r_trunclen))
print(compress)
flog.info('Filtering reads...')
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(f_trunclen,r_trunclen),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE, trimLeft=15,
compress=compress, multithread=TRUE)
flog.info('Done.')
#COMMON
flog.info('Learning error model...')
errF <- learnErrors(filtFs, multithread=TRUE)
errR <- learnErrors(filtRs, multithread=TRUE)
flog.info('Done.')
if(plot){
flog.info('Plotting 2 ...')
pf2 <- plotErrors(errF, nominalQ=TRUE)
pr2 <- plotErrors(errR, nominalQ=TRUE)
print("plotOK")
ggsave(paste(out,'/err_plot_f.png',sep=''), plot=pf2)
ggsave(paste(out,'/err_plot_f.png',sep=''), plot=pr2)
flog.info('Done.')
}
pf2 <- plotErrors(errF, nominalQ=TRUE)
pf2
ggsave(paste(out,'/err_plot_f.png',sep=''), plot=pf2)
rlang::last_error()
paste(out,'/err_plot_f.png',sep='')
out
devtools::load_all("~/Repository/LRF/ranomaly")
dada2_fun(path="~/Repository/LRF/00_erifa_bak/ranomaly_test/reads", compress=TRUE, plot=TRUE)
devtools::load_all("~/Repository/LRF/ranomaly")
? dada2_fun
devtools::load_all("~/Repository/LRF/ranomaly")
? dada2_fun
dada2_fun(path="~/Repository/LRF/00_erifa_bak/ranomaly_test/reads", compress=TRUE, plot=TRUE)
amplicon = "16S"
path = "~/Repository/LRF/00_erifa_bak/ranomaly_test/reads"
out = "./dada2_out/"
f_trunclen = 240
r_trunclen = 240
f_primer = "GCATCGATGAAGAACGCAGC"
r_primer = "TCCTCCGCTTWTTGWTWTGC"
plot = TRUE
compress = TRUE
verbose = 1
if(verbose == 3){
invisible(flog.threshold(DEBUG))
} else {
invisible(flog.threshold(INFO))
}
flog.info('Done.')
wd <- getwd()
flog.info("Creating directory.")
if(!dir.exists(outpath)){
dir.create(outpath)
}
flog.info('Done.')
## Reads path
# path <- opt$path
#list.files(path)
if(compress==TRUE){
flog.info('Loading compress files...')
fnFs <- sort(list.files(path, pattern = "_R1.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern = "_R2.fastq.gz", full.names = TRUE))
}else{
flog.info('Loading flat files...')
fnFs <- sort(list.files(path, pattern = "_R1.fastq$", full.names = TRUE))
fnRs <- sort(list.files(path, pattern = "_R2.fastq$", full.names = TRUE))
}
flog.debug("File list...")
flog.debug(fnFs)
flog.debug(fnRs)
flog.info('Done.')
flog.info('DADA2 16S')
# save.image("debug.rdata")
if(plot){
flog.info('Plotting 1 ...')
pf <- plotQualityProfile(fnFs[1:2])
pr <- plotQualityProfile(fnRs[1:2])
ggsave(paste(outpath,'/qual_plot_f.png',sep=''), plot=pf)
ggsave(paste(outpath,'/qual_plot_r.png',sep=''), plot=pr)
flog.info('Done.')
}
flog.debug(length(fnFs))
flog.debug(length(fnRs))
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
if(compress){
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
}else{
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq"))
}
names(filtFs) <- sample.names
names(filtRs) <- sample.names
# print(head(fnFs))
# print(head(fnRs))
# print(head(filtFs))
# print(head(filtRs))
#
# print(head(f_trunclen))
# print(head(r_trunclen))
#
# print(compress)
# -------------------------------------------------------------------------
flog.info('Filtering reads...')
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(f_trunclen,r_trunclen),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE, trimLeft=15,
compress=compress, multithread=TRUE)
flog.info('Done.')
}
#COMMON
flog.info('Learning error model...')
errF <- learnErrors(filtFs, multithread=TRUE)
errR <- learnErrors(filtRs, multithread=TRUE)
flog.info('Done.')
if(plot){
flog.info('Plotting 2 ...')
pf2 <- plotErrors(errF, nominalQ=TRUE)
pr2 <- plotErrors(errR, nominalQ=TRUE)
print("plotOK")
ggsave(paste(outpath,'/err_plot_f.png',sep=''), plot=pf2)
ggsave(paste(outpath,'/err_plot_f.png',sep=''), plot=pr2)
flog.info('Done.')
}
# save.image("debug.rdata")
mergers <- vector("list", length(sample.names))
names(mergers) <- sample.names;
stockFs=NULL; stockRs=NULL
getN <- function(x) sum(getUniques(x))
for(sam in sample.names) {
flog.info(paste('Processing sample ',sam))
flog.info('Dereplicating fastq...')
derepFs <- derepFastq(filtFs[[sam]], verbose=TRUE)
derepRs <- derepFastq(filtRs[[sam]], verbose=TRUE)
flog.info('Done.')
flog.info('dada2...')
dadaFs <- dada(derepFs, err=errF, multithread=TRUE, pool=FALSE, selfConsist=FALSE)
stockFs <- c(stockFs, getN(dadaFs))
dadaRs <- dada(derepRs, err=errR, multithread=TRUE, pool=FALSE, selfConsist=FALSE)
stockRs <- c(stockRs,getN(dadaRs))
flog.info('Done.')
flog.info('Merging pairs...')
merger <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose=FALSE)
flog.info('Done.')
mergers[[sam]] <- merger
}
seqtab <- makeSequenceTable(mergers)
flog.info('Removing chimeras...')
seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", multithread=TRUE, verbose=TRUE)
flog.debug(sum(seqtab.nochim))
flog.debug(sum(seqtab))
flog.debug(sum(seqtab.nochim)/sum(seqtab))
# flog.info(sum(seqtab.nochim)/sum(seqtab))
flog.info('Done.')
track <- cbind.data.frame(out, stockFs, stockRs, sapply(mergers, getN), rowSums(seqtab.nochim))
# If processing a single sample, remove the sapply calls: e.g. replace sapply(dadaFs, getN) with getN(dadaFs)
colnames(track) <- c("input", "filtered", "denoisedF", "denoisedR", "merged", "nonchim")
rownames(track) <- sample.names
head(track)
write.table(track, paste(outpath,"/read_tracking.csv",sep=''), sep="\t", row.names=TRUE, col.names=NA, quote=FALSE)
outpath = "./dada2_out/"
write.table(track, paste(outpath,"/read_tracking.csv",sep=''), sep="\t", row.names=TRUE, col.names=NA, quote=FALSE)
seqtab.export <- seqtab.nochim
colnames(seqtab.export) <- sapply(colnames(seqtab.export),digest,algo="md5")
library(digest)
colnames(seqtab.export) <- sapply(colnames(seqtab.export),digest,algo="md5")
devtools::load_all("~/Repository/LRF/ranomaly")
dada2_fun(path="~/Repository/LRF/00_erifa_bak/ranomaly_test/reads", compress=TRUE, plot=TRUE)
devtools::load_all("~/Repository/LRF/ranomaly")
dada2_fun(path="~/Repository/LRF/00_erifa_bak/ranomaly_test/reads", compress=TRUE, plot=TRUE)
devtools::load_all(".")
source('~/.active-rstudio-document', echo=TRUE)
devtools::load_all(".")
res_dada = dada2_fun(path="~/Repository/LRF/00_erifa_bak/ranomaly_test/reads", compress=TRUE, plot=TRUE)
res_dada
res_dada
dada_res = dada2_fun(path="~/Repository/LRF/00_erifa_bak/ranomaly_test/reads", compress=TRUE, plot=TRUE)
devtools::load_all(".")
assign_taxo(dada_res = dada_res)
devtools::load_all(".")
assign_taxo(dada_res = dada_res)
assign_taxo(dada_res = dada_res, id_db = "/home/erifa/bank/silva/SILVA_SSU_r132_March2018.RData")
? IdTaxa
? DECIPHER::IdTaxa
devtools::load_all(".")
assign_taxo(dada_res = dada_res, id_db = "/home/erifa/bank/silva/SILVA_SSU_r132_March2018.RData")
library(ranomaly)
golem::document_and_reload()
devtools::document()
devtools::load_all(".")
assign_taxo(dada_res = dada_res, id_db = "/home/erifa/bank/silva/SILVA_SSU_r132_March2018.RData")
devtools::document()
devtools::load_all(".")
tree = generate_tree_fun(dada_res)
setwd("~/Repository/LRF/00_erifa_bak/ranomaly_test")
dada_res = dada2_fun(path="~/Repository/LRF/00_erifa_bak/ranomaly_test/reads", compress=TRUE, plot=TRUE)
tree = generate_tree_fun(dada_res)
devtools::document()
devtools::document("~/Repository/LRF/ranomaly/")
devtools::load_all("~/Repository/LRF/ranomaly")
tree = generate_tree_fun(dada_res)
devtools::load_all(".")
devtools::load_all("~/Repository/LRF/ranomaly")
tree = generate_tree_fun(dada_res)
devtools::load_all("~/Repository/LRF/ranomaly")
tree = generate_tree_fun(dada_res)
devtools::document("~/Repository/LRF/ranomaly")
library(ranomaly)
devtools::load_all("~/Repository/LRF/ranomaly")
data = generate_phyloseq_fun(dada_res, tax.table, "./sample-metadata.csv")
data = generate_phyloseq_fun(dada_res, tax.table, "./sample-metadata.csv")
devtools::load_all("~/Repository/LRF/ranomaly")
data = generate_phyloseq_fun(dada_res, tax.table, "./sample-metadata.csv")
getwd()
metadata = "/home/erifa/Repository/LRF/00_erifa_bak/ranomaly_test"
read.table(metadata, sep = "\t", header = TRUE)
metadata = "/home/erifa/Repository/LRF/00_erifa_bak/ranomaly_test/sample-metadata.csv"
read.table(metadata, sep = "\t", header = TRUE)
data = generate_phyloseq_fun(dada_res, tax.table, metadata = "./sample-metadata.csv")
devtools::load_all("~/Repository/LRF/ranomaly")
data = generate_phyloseq_fun(dada_res = dada_res, tax.table = tax.table, tree = tree, metadata = "./sample-metadata.csv")
data = generate_phyloseq_fun(dada_res = dada_res, taxtable = tax.table, tree = tree, metadata = "./sample-metadata.csv")
devtools::load_all("~/Repository/LRF/ranomaly")
data = generate_phyloseq_fun(dada_res = dada_res, taxtable = tax.table, tree = tree, metadata = "./sample-metadata.csv")
data = generate_phyloseq_fun(otutable = dada_res, taxtable = tax.table, tree = tree, metadata = "./sample-metadata.csv")
data = generate_phyloseq_fun(otutable = dada_res, taxtable = tax.table, tree = tree, metadata = "./sample-metadata.csv")
dada_res$
devtools::load_all("~/Repository/LRF/ranomaly")
devtools::load_all("~/Repository/LRF/ranomaly")
data = generate_phyloseq_fun(otutable = dada_res, taxtable = tax.table, tree = tree, metadata = "./sample-metadata.csv")
tax.table = assign_taxo(dada_res = dada_res, id_db = "/home/erifa/bank/silva/SILVA_SSU_r132_March2018.RData")
tree
data = generate_phyloseq_fun(otutable = dada_res, taxtable = tax.table, tree = tree, metadata = "./sample-metadata.csv")
devtools::load_all("~/Repository/LRF/ranomaly")
data = generate_phyloseq_fun(otutable = dada_res, taxtable = tax.table, tree = tree, metadata = "./sample-metadata.csv")
data
devtools::load_all("~/Repository/LRF/ranomaly")
setwd("~/Repository/LRF/00_erifa_bak/ranomaly_test")
dada_res = dada2_fun(path="~/Repository/LRF/00_erifa_bak/ranomaly_test/reads", compress=TRUE, plot=TRUE)
tax.table = assign_taxo(dada_res = dada_res, id_db = "/home/erifa/bank/silva/SILVA_SSU_r132_March2018.RData")
tree = generate_tree_fun(dada_res)
data = generate_phyloseq_fun(otutable = dada_res, taxtable = tax.table, tree = tree, metadata = "./sample-metadata.csv")
decontam_fun(data = data, domain = TRUE, column = "type", ctrl_identifier = "control", spl_identifier = "sample")
devtools::load_all("~/Repository/LRF/ranomaly")
devtools::load_all("~/Repository/LRF/ranomaly")
decontam_fun(data = data, domain = TRUE, column = "type", ctrl_identifier = "control", spl_identifier = "sample")
library(ranomaly)
library(ranomaly)
devtools::load_all("~/Repository/LRF/ranomaly")
decontam_fun(data = data, domain = TRUE, column = "type", ctrl_identifier = "control", spl_identifier = "sample")
? grid.draw
devtools::load_all("~/Repository/LRF/ranomaly")
decontam_fun(data = data, domain = TRUE, column = "type", ctrl_identifier = "control", spl_identifier = "sample")
data
decontam_fun(data = data, domain = TRUE, column = "type", ctrl_identifier = "control", spl_identifier = "sample", number = 100)
data = generate_phyloseq_fun(otutable = dada_res, taxtable = tax.table, tree = tree, metadata = "./sample-metadata.csv")
data = decontam_fun(data = data, domain = TRUE, column = "type", ctrl_identifier = "control", spl_identifier = "sample")
data = generate_phyloseq_fun(otutable = dada_res, taxtable = tax.table, tree = tree, metadata = "./sample-metadata.csv")
data = decontam_fun(data = data, domain = TRUE, column = "type", ctrl_identifier = "control", spl_identifier = "sample", number = 100)
devtools::load_all("~/Repository/LRF/ranomaly")
data
data = generate_phyloseq_fun(otutable = dada_res, taxtable = tax.table, tree = tree, metadata = "./sample-metadata.csv")
data
data = decontam_fun(data = data, domain = TRUE, column = "type", ctrl_identifier = "control", spl_identifier = "sample", number = 100)
data
export_to_stamp_fun(data = data)
devtools::load_all("~/Repository/LRF/ranomaly")
export_to_stamp_fun(data = data)
devtools::load_all("~/Repository/LRF/ranomaly")
data
phy2tsv_fun(data = data)
devtools::load_all("~/Repository/LRF/ranomaly")
phy2tsv_fun(data = data)
devtools::load_all("~/Repository/LRF/ranomaly")
devtools::load_all("~/Repository/LRF/ranomaly")
phy2tsv_fun(data = data)
devtools::load_all("~/Repository/LRF/ranomaly")
split_table_fun(data, column1 = "origin")
setwd("~/Repository/LRF/00_erifa_bak/ranomaly_test")
dada_res = dada2_fun(path="~/Repository/LRF/00_erifa_bak/ranomaly_test/reads", compress=TRUE, plot=TRUE)
tax.table = assign_taxo(dada_res = dada_res, id_db = "/home/erifa/bank/silva/SILVA_SSU_r132_March2018.RData")
tree = generate_tree_fun(dada_res)
data = generate_phyloseq_fun(otutable = dada_res, taxtable = tax.table, tree = tree, metadata = "./sample-metadata.csv")
data = decontam_fun(data = data, domain = TRUE, column = "type", ctrl_identifier = "control", spl_identifier = "sample", number = 100)
export_to_stamp_fun(data = data)
phy2tsv_fun(data = data)
split_table_fun(data, column1 = "origin")
save.image("test_image.rdata")
split_table_fun(data, column1 = "lot")
thisFile <- function() {
cmdArgs <- commandArgs(trailingOnly = FALSE)
needle <- "--file="
match <- grep(needle, cmdArgs)
if (length(match) > 0) {
# Rscript
return(normalizePath(sub(needle, "", cmdArgs[match])))
} else {
# 'source'd via R console
return(normalizePath(sys.frames()[[1]]$ofile))
}
}
thisFile()
setwd("~/Repository/LRF/00_erifa_bak/ranomaly_test")
load("test_image.rdata")
ls()
devtools::load_all("~/Repository/LRF/ranomaly")
bars_fun(data = data, column1 = temps, column2 = lot, rank=c("Phylum,Genus"), rare = "lot")
bars_fun(data = data, column1 = "temps", column2 = "lot", rank=c("Phylum,Genus"), rare = "lot")
data
devtools::load_all("~/Repository/LRF/ranomaly")
bars_fun(data = data, column1 = temps, column2 = lot, rank=c("Phylum,Genus"), rare = "lot")
bars_fun(data = data, column1 = "temps", column2 = "lot", rank=c("Phylum,Genus"), rare = "lot")
getwd()
bars_fun(data = data, column1 = "temps", column2 = "lot", rank=c("Phylum,Genus"), rare = "lot")
bars_fun(data = data, column1 = "temps", column2 = "lot", rank=c("Phylum,Genus"), rare = "lot")
? unlink
getwd()
devtools::load_all("~/Repository/LRF/ranomaly")
bars_fun(data = data, column1 = "temps", column2 = "lot", rank=c("Phylum,Genus"), rare = "lot")
devtools::load_all("~/Repository/LRF/ranomaly")
bars_fun(data = data, column1 = "temps", column2 = "lot", rank=c("Phylum,Genus"), rare = "lot")
devtools::load_all("~/Repository/LRF/ranomaly")
bars_fun(data = data, column1 = "temps", column2 = "lot", rank=c("Phylum,Genus"), rare = "lot")
out1
out1
devtools::load_all("~/Repository/LRF/ranomaly")
bars_fun(data = data, column1 = "temps", column2 = "lot", rank=c("Phylum,Genus"), rare = "lot")
bars_fun(data = data, column1 = "temps", column2 = "lot", rank=c("Phylum,Genus"), rare = "lot")
devtools::load_all("~/Repository/LRF/ranomaly")
diversity_alpha_fun(data = data, output = "./plot_div_alpha/", column1 = "temps", column2 = "lot",
column3 = "", supcovs = "", measures = c("Observed","Shannon","Simpson","InvSimpson") )
devtools::load_all("~/Repository/LRF/ranomaly")
diversity_alpha_fun(data = data, output = "./plot_div_alpha/", column1 = "temps", column2 = "lot",
column3 = "", supcovs = "", measures = c("Observed","Shannon","Simpson","InvSimpson") )
devtools::load_all("~/Repository/LRF/ranomaly")
diversity_beta_fun(data = data, output = "./plot_div_beta/", glom = "ASV", column1 = "temps", column2 = "lot", covar ="")
devtools::load_all("~/Repository/LRF/ranomaly")
diversity_beta_fun(data = data, output = "./plot_div_beta/", glom = "ASV", column1 = "temps", column2 = "lot", covar ="")
library(phyloseq.extended)
? plot_samples
?? plot_samples
devtools::load_all("~/Repository/LRF/ranomaly")
diversity_beta_fun(data = data, output = "./plot_div_beta/", glom = "ASV", column1 = "temps", column2 = "lot", covar ="")
metacoder_funfunction(data = data, output = "./metacoder", column1 = "temps_lot", column2 = "", rank = "Genus",
signif = TRUE, plottrees = FALSE, min ="10", comp = "T6_lot1~T6_lot3,T9_lot1~T9_lot3")
devtools::load_all("~/Repository/LRF/ranomaly")
metacoder_fun(data = data, output = "./metacoder", column1 = "temps_lot", column2 = "", rank = "Genus",
signif = TRUE, plottrees = FALSE, min ="10", comp = "T6_lot1~T6_lot3,T9_lot1~T9_lot3")
devtools::load_all("~/Repository/LRF/ranomaly")
metacoder_fun(data = data, output = "./metacoder", column1 = "temps_lot", column2 = "", rank = "Genus",
signif = TRUE, plottrees = FALSE, min ="10", comp = "T6_lot1~T6_lot3,T9_lot1~T9_lot3")
devtools::load_all("~/Repository/LRF/ranomaly")
metacoder_fun(data = data, output = "./metacoder", column1 = "temps_lot", column2 = "", rank = "Genus",
signif = TRUE, plottrees = FALSE, min ="10", comp = "T6_lot1~T6_lot3,T9_lot1~T9_lot3")
devtools::load_all("~/Repository/LRF/ranomaly")
deseq2_fun(data = data, output = "./deseq/", column1 = "temps_lot" verbose = 1, rank = "Genus", comp = "T6_lot1~T6_lot3,T9_lot1~T9_lot3")
deseq2_fun(data = data, output = "./deseq/", column1 = "temps_lot", verbose = 1, rank = "Genus", comp = "T6_lot1~T6_lot3,T9_lot1~T9_lot3")
devtools::load_all("~/Repository/LRF/ranomaly")
deseq2_fun(data = data, output = "./deseq/", column1 = "temps_lot", verbose = 1, rank = "Genus", comp = "T6_lot1~T6_lot3,T9_lot1~T9_lot3")
devtools::load_all("~/Repository/LRF/ranomaly")
deseq2_fun(data = data, output = "./deseq/", column1 = "temps_lot", verbose = 1, rank = "Genus", comp = "T6_lot1~T6_lot3,T9_lot1~T9_lot3")
devtools::load_all("~/Repository/LRF/ranomaly")
deseq2_fun(data = data, output = "./deseq/", column1 = "temps_lot", verbose = 1, rank = "Genus", comp = "T6_lot1~T6_lot3,T9_lot1~T9_lot3")
devtools::load_all("~/Repository/LRF/ranomaly")
deseq2_fun(data = data, output = "./deseq/", column1 = "temps_lot", verbose = 1, rank = "Genus", comp = "T6_lot1~T6_lot3,T9_lot1~T9_lot3")
setwd("~/Repository/LRF/00_erifa_bak/ranomaly_test")
devtools::load_all("~/Repository/LRF/ranomaly")
deseq2_fun(data = data, output = "./deseq/", column1 = "temps_lot", verbose = 1, rank = "Genus", comp = "T6_lot1~T6_lot3,T9_lot1~T9_lot3")   # BUG
data
setwd("~/Repository/LRF/00_erifa_bak/ranomaly_test")
load("test_image.rdata")
devtools::load_all("~/Repository/LRF/ranomaly")
deseq2_fun(data = data, output = "./deseq/", column1 = "temps_lot", verbose = 1, rank = "Genus", comp = "T6_lot1~T6_lot3,T9_lot1~T9_lot3")   # BUG
setwd("~/Repository/LRF/00_erifa_bak/ranomaly_test")
load("test_image.rdata")
devtools::load_all("~/Repository/LRF/ranomaly")
deseq2_fun(data = data, output = "./deseq/", column1 = "temps_lot", verbose = 1, rank = "Genus", comp = "T6_lot1~T6_lot3,T9_lot1~T9_lot3")   # BUG
devtools::load_all("~/Repository/LRF/ranomaly")
metagenomeseq_fun(data = data, output = "./metagenomeseq/", column1 = "temps_lot", verbose = 1, rank = "Genus", comp = "T6_lot1~T6_lot3,T9_lot1~T9_lot3")
devtools::load_all("~/Repository/LRF/ranomaly")
metagenomeseq_fun(data = data, output = "./metagenomeseq/", column1 = "temps_lot", verbose = 1, rank = "Genus", comp = "T6_lot1~T6_lot3,T9_lot1~T9_lot3")
devtools::load_all("~/Repository/LRF/ranomaly")
TABF = aggregate_fun(data = data, metacoder = ./metacoder/metacoder_temps_lot_Genus.csv, deseq = ./deseq/, mgseq = ./metagenomeSeq/, output = "./aggregate_diff/",
column1 = "temps_lot", column2 = NULL, verbose = 1, rank = "Genus", comp = "T6_lot1~T6_lot3,T9_lot1~T9_lot3")
TABF = aggregate_fun(data = data, metacoder = "./metacoder/metacoder_temps_lot_Genus.csv", deseq = "./deseq/", mgseq = "./metagenomeSeq/", output = "./aggregate_diff/",
column1 = "temps_lot", column2 = NULL, verbose = 1, rank = "Genus", comp = "T6_lot1~T6_lot3,T9_lot1~T9_lot3")
TABF
setwd("~/Repository/LRF/00_erifa_bak/ranomaly_test")
load("test_image.rdata")
library(ranomaly)
setwd("~/Repository/LRF/00_erifa_bak/ranomaly_test/test2_reel/")
devtools::load_all("~/Repository/LRF/ranomaly")
dada_res = dada2_fun(path="~/Repository/LRF/00_erifa_bak/ranomaly_test/reads_JP_dis2/", compress=TRUE, plot=FALSE)
dada_res = dada2_fun(path="~/Repository/LRF/00_erifa_bak/ranomaly_test/reads_JP_dis2/", compress=TRUE, plot=FALSE)
dada_res = dada2_fun(path="~/Repository/LRF/00_erifa_bak/ranomaly_test/reads_JP_dis2/", compress=TRUE, plot=TRUE)
getwd()
dada_res = dada2_fun(path="~/Repository/LRF/00_erifa_bak/ranomaly_test/test2_reel/reads_JP_dis2/", compress=TRUE, plot=FALSE)
setwd("~/Repository/LRF/00_erifa_bak/ranomaly_test")
dada_res = dada2_fun(path="~/Repository/LRF/00_erifa_bak/ranomaly_test/reads", compress=TRUE, plot=TRUE)
library(ranomaly)
library(ranomaly)
library(ranomaly)
setwd("~/Repository/LRF/00_erifa_bak/ranomaly_test/test2_reel/")
dada_res = dada2_fun(path="~/Repository/LRF/00_erifa_bak/ranomaly_test/test2_reel/reads_JP_dis2/", compress=TRUE, plot=FALSE)
devtools::load_all("~/Repository/LRF/ranomaly")
? dada2_fun
? `assign_taxo
è
? assign_taxo
library(phyloseq)
dat(GlobalPatterns)
data(GlobalPatterns)
rank(GlobalPatterns)
ranknames(GlobalPatterns)
rank_names(GlobalPatterns)
library(ranomaly)
library(ranomaly)
setwd("/home/erifa/Repository/LRF/00_erifa_bak/ranomaly_test")
